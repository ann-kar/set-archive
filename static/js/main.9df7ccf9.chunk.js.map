{"version":3,"sources":["Main/Main.js","Main/Menu/MenuCard/MenuCard.js","Main/Menu/Menu.js","components/CheckButton/CheckButton.js","components/GameCard/GameCard.js","components/SVG/SVG.js","components/Symbol/Symbol.js","components/Timer/Timer.js","Main/NewGame/Victory.js","Main/NewGame/NewGame.js","Main/Results/Results.js","Main/Rules/Rules.js","App.js","index.js"],"names":["Main","state","newGame","results","rules","position","setState","prevState","prevProps","this","el","className","React","Component","MenuCard","props","menuButton","menuButtons","id10","id11","id12","Object","keys","find","id","onClick","Menu","Array","fill","map","i","CheckButton","checkButton","GameCard","inactiveClass","activeClass","highlightClass","active","length","cardClickHandler","parseInt","SVG","width","height","patternUnits","patternTransform","x","y","Symbol","classes","setClasses","xmlns","viewBox","data-id","Timer","minutes","seconds","centiseconds","message","isOn","stopTimer","clearInterval","timerID","addSecsAndMins","hideMessage","messageTimeout","setTimeout","setInterval","win","extraSecs","toString","padStart","Victory","NewGame","deck","generateDeck","cardParam","j","k","l","push","threeCardsHighlighted","checkIfSet","generateNewCards","Number","reduce","a","b","split","every","num","checkAllCards","test","set","visibleCards","filter","key","slice","threesToCheck","newState","newCardId","activeCardLocs","getKeyByValue","substring","randomNum","undefined","deckEmpty","generateExtraCards","extraCardLocations","some","e","cardIndex","findIndex","target","splice","Math","floor","random","object","value","cards","card","Results","Rules","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9df7ccf9.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Main.scss\";\nimport {Menu, NewGame, Rules, Results} from \"../Main\";\n\nclass Main extends React.Component {\n\n    state = {\n        newGame: false,\n        results: false,\n        rules: false,\n        position: true,\n    };\n\n    newGame = () => {\n\n        this.setState(prevState => ({\n            newGame: !prevState.newGame,\n            rules: false,\n            results: false\n        }));\n    };\n\n    rules = () => {\n\n        this.setState(prevState => ({\n            rules: !prevState.rules,\n            newGame: false,\n            results: false\n        }));\n    };\n\n    results = () => {\n\n        this.setState(prevState => ({\n            results: !prevState.results,\n            newGame: false,\n            rules: false\n        }));\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n\n        const {newGame, results, rules} = this.state;\n        const btnNames = [\"newGame\", \"results\", \"rules\"];\n\n        for (let el of btnNames) {\n            if (this.state[el] !== prevState[el]) {\n                if (this.state[el]) {\n                    this.setState({position: false})\n                } else if (!rules && !newGame && !results) {\n                    this.setState({position: true})\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Main\">\n                {this.state.newGame && <NewGame />}\n                {this.state.results && <Results />}\n                {this.state.rules && <Rules />}\n\n                <Menu\n                    newGame={this.newGame}\n                    results={this.results}\n                    rules={this.rules}\n                    position={this.state.position}/>\n            </div>\n        )\n    }\n}\n\nexport default Main;","import React from \"react\";\n\nimport \"./MenuCard.scss\";\n\nfunction MenuCard(props) {\n\n    let menuButton, position;\n\n    if (props.position) {\n        position = \"center\"\n    } else {\n        position = \"right\"\n    }\n\n    const menuButtons = {\n        id10: [\"newGame\", \"new game\"],\n        id11: [\"results\", \"results\"],\n        id12: [\"rules\", \"rules\"]\n    };\n\n    if (Object.keys(menuButtons).find(el => el === props.id)) {\n\n        menuButton = <button\n            className={`button ${position}`}\n            onClick={props[menuButtons[props.id][0]]}>{menuButtons[props.id][1]}</button>\n\n    }\n\n    return (\n        <div className={`MenuCard ${position}`} id={props.id}>\n            {menuButton || \"SET\"}\n        </div>\n    )\n}\n\nexport default MenuCard;","import React from \"react\";\n\nimport \"./Menu.scss\";\nimport MenuCard from \"./MenuCard/MenuCard\";\n\nclass Menu extends React.Component {\n\n    render() {\n        return (\n            <nav className=\"Menu\">\n\n                {Array(9).fill(\"x\").map((el, i) =>\n                    <MenuCard id={\"id\" + i}\n                              key={i}\n                              position={this.props.position}\n                    />)}\n\n                <MenuCard position={this.props.position} id={\"id10\"} newGame={this.props.newGame}/>\n                <MenuCard position={this.props.position} id={\"id11\"} results={this.props.results}/>\n                <MenuCard position={this.props.position} id={\"id12\"} rules={this.props.rules}/>\n\n            </nav>\n        )\n    }\n}\n\nexport default Menu","import React from \"react\";\n\nimport \"./CheckButton.scss\";\n\nconst CheckButton = (props) => {\n\n    return (\n        <button className=\"CheckButton\" onClick={props.checkButton}>\n            check for sets\n        </button>\n    )\n};\n\nexport default CheckButton;","import React from \"react\";\n\nimport \"./GameCard.scss\";\nimport {Symbol} from \"../../components\";\n\nclass GameCard extends React.Component {\n\n    state = {\n        inactiveClass: true,\n        activeClass: false,\n        highlightClass: false\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n\n        const {active, id} = this.props;\n\n        if (!active.length && !this.state.inactiveClass) {\n\n            this.setState({\n                inactiveClass: true,\n                activeClass: false,\n                highlightClass: false\n            })\n\n        } else if ((active.length === 3) && (active.find((el) => el === id)) && !this.state.highlightClass) {\n\n            this.setState({\n                highlightClass: true,\n                activeClass: false,\n                inactiveClass: false\n            })\n\n        } else if (active.find((el) => el === id)) {\n\n            if (!this.state.activeClass) {\n\n                this.setState({\n                    activeClass: true,\n                    inactiveClass: false\n                })\n            }\n        } else if (active.find((el) => el !== id)) {\n\n            if (!this.state.inactiveClass) {\n\n                this.setState({\n                    activeClass: false,\n                    inactiveClass: true\n                })\n            }\n        }\n    }\n\n    render() {\n\n        const {id} = this.props;\n\n        if (id) {\n            return (\n                <div className={`GameCard \n            ${this.state.activeClass ? \"active\" : false} \n            ${this.state.inactiveClass ? \"inactive\" : false}\n            ${this.state.highlightClass ? \"highlight\" : false} `} id={id}\n                     onClick={this.props.cardClickHandler}>\n                    {Array(parseInt(id[3]) + 1)\n                        .fill(\"x\")\n                        .map((el, i) => <Symbol key={i} id={id}/>)}\n                </div>\n            )\n        } else {\n            return <div/>\n        }\n    }\n}\n\nexport default GameCard;","import React from \"react\";\n\nimport \"./SVG.scss\";\nfunction SVG () {\n\n    return (\n            <svg className=\"SVG\" width=\"0\" height=\"0\">\n                <defs>\n                    <pattern id=\"pattern-red\"\n                             width=\"30\" height=\"30\"\n                             patternUnits=\"userSpaceOnUse\"\n                             patternTransform=\"rotate(0 50 50)\">\n                        <rect width=\"15\" height=\"30\" x=\"0\" y=\"0\" className=\"red fill\"></rect>\n                        <rect width=\"15\" height=\"30\" x=\"15\" y=\"0\" fill=\"white\"></rect>\n                    </pattern>\n                    <pattern id=\"pattern-green\"\n                             width=\"30\" height=\"30\"\n                             patternUnits=\"userSpaceOnUse\"\n                             patternTransform=\"rotate(0 50 50)\">\n                        <rect width=\"15\" height=\"30\" x=\"0\" y=\"0\" className=\"green fill\"></rect>\n                        <rect width=\"15\" height=\"30\" x=\"15\" y=\"0\" fill=\"white\"></rect>\n                    </pattern>\n                    <pattern id=\"pattern-violet\"\n                             width=\"30\" height=\"30\"\n                             patternUnits=\"userSpaceOnUse\"\n                             patternTransform=\"rotate(0 50 50)\">\n                        <rect width=\"15\" height=\"30\" x=\"0\" y=\"0\" className=\"violet fill\"></rect>\n                        <rect width=\"15\" height=\"30\" x=\"15\" y=\"0\" fill=\"white\"></rect>\n                    </pattern>\n                </defs>\n            </svg>\n    )\n}\n\nexport default SVG;","import React from \"react\";\n\nimport \"./Symbol.scss\";\n\nclass Symbol extends React.Component {\n\n    state = {\n        classes: \"\"\n    };\n\n    setClasses = () => {\n\n        const colors = ['green', 'red', 'violet'];\n        const shapes = ['diamond', 'squiggle', 'stadium'];\n        const fills = ['blank', 'full', 'gradient'];\n        const classes = colors[this.props.id[0]] + \" \" + shapes[this.props.id[1]] + \" \" + fills[this.props.id[2]];\n\n        this.setState({\n            classes: classes\n        });\n    };\n\n    componentDidMount() {\n\n        this.setClasses()\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n        if (this.props.id !== prevProps.id) {\n            this.setClasses();\n        }\n    }\n\n    render() {\n        return (\n            <svg\n                className=\"Symbol\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 480 640\"\n                data-id={this.props.id}>\n                <path className={this.state.classes} data-id={this.props.id}/>\n            </svg>\n        );\n    }\n}\n\nexport default Symbol;","import React from \"react\";\n\nimport \"./Timer.scss\";\n\nclass Timer extends React.Component {\n\n    state = {\n        minutes: 0,\n        seconds: 0,\n        centiseconds: 0,\n        message: false,\n        isOn: true\n    };\n\n    componentDidMount() {\n\n        this.timerID = setInterval(() =>\n            this.setState({centiseconds: this.state.centiseconds + 1}, this.addSecsAndMins), 10);\n    }\n\n    componentDidUpdate(prevProps) {\n\n        if (this.props.win) { this.stopTimer() }\n\n        if ((prevProps.extraSecs !== this.props.extraSecs) && this.state.isOn) {\n\n            this.setState({\n                seconds: this.state.seconds + 3,\n                message: true\n            }, () => this.hideMessage());\n        }\n    }\n\n    stopTimer = () => {\n\n        clearInterval(this.timerID);\n        if (this.state.isOn) {this.setState({isOn: false})}\n\n    };\n\n    addSecsAndMins = () => {\n\n        if (this.state.centiseconds >= 99) {\n            this.setState({\n                centiseconds: 0,\n                seconds: this.state.seconds + 1,\n            })\n        }\n\n        if (this.state.seconds >= 60) {\n            this.setState({\n                seconds: 0,\n                minutes: this.state.minutes + 1,\n            })\n        }\n    };\n\n    hideMessage = () => {\n\n        this.messageTimeout = setTimeout(() => this.setState({message: false}), 500)\n\n    };\n\n\n    componentWillUnmount() {\n\n        clearInterval(this.timerID);\n        clearInterval(this.messageTimeout);\n\n    }\n\n    render() {\n\n        return (\n            <>\n                <div className=\"Timer\" onClick={this.stopTimer}>\n                    <div className=\"Timer__display\">\n                        {`${this.state.minutes.toString().padStart(2, \"0\")} : \n                          ${this.state.seconds.toString().padStart(2, \"0\")} : \n                          ${this.state.centiseconds.toString().padStart(2, \"0\")}`}\n                    </div>\n                </div>\n                {this.state.message ? <div className=\"Timer__message\"> + 3 seconds</div> : null}\n            </>\n        )\n    }\n}\n\nexport default Timer;","import React from \"react\";\n\nimport \"./Victory.scss\";\n\nclass Victory extends React.Component {\n\n    render () {\n\n        return (\n            <div className=\"Victory fade-in\">\n                <h2 className=\"Victory__text\">you've found them all!</h2>\n            </div>\n        )\n    }\n\n\n};\n\nexport default Victory;","import React from \"react\";\n\nimport \"./NewGame.scss\";\nimport { SVG, GameCard, CheckButton, Timer } from \"../../components\";\nimport Victory from \"./Victory\";\n\nclass NewGame extends React.Component {\n\n    state = {\n            deck: [],\n            active: [],\n            win: false,\n            extraSecs: 0\n        };\n\n    componentDidMount() {\n\n        // I generate a new deck & the first 12 card ids, remove these cards from deck and save data to state\n\n        let deck = this.generateDeck();\n        const newState = {};\n\n        for (let i = 1; i <= 12; i++) {\n\n            let newCardId = deck[this.randomNum(deck)];\n            newState[\"card\" + i] = newCardId;\n            deck = deck.filter((el) => (el !== newCardId));\n        }\n\n        newState.deck = deck;\n        this.setState(newState);\n    }\n\n    generateDeck = () => {\n\n        let deck = [];\n        let cardParam = [\"0\", \"1\", \"2\"];\n\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                for (let k = 0; k < 3; k++) {\n                    for (let l = 0; l < 3; l++) {\n                        deck.push(cardParam[i] + cardParam[j] + cardParam[k] + cardParam[l])\n                    }\n                }\n            }\n        }\n        return deck\n    };\n\n    threeCardsHighlighted = () => {\n\n        const set = this.checkIfSet(this.state.active);\n        if (set) {\n            this.generateNewCards();\n        } else {\n            setTimeout(() => this.setState({active: []}), 500);\n        }\n    };\n\n    checkIfSet = (active) => {\n\n        // logic: if the sum of all three ids will include only digits 0, 3, and 6, it is a set.\n\n        const activeIdsAsNums = active.map(el => (Number(el)));\n        const numToCheck = (activeIdsAsNums.reduce((a, b) => a + b)).toString().split(\"\");\n        const set = numToCheck.every(num => num % 3 === 0);\n\n        return set;\n    };\n\n    checkAllCards = () => {\n\n        let test = false;\n        let set = [];\n\n        // I get the values of all cards\n\n        let visibleCards = Object.keys(this.state)\n            .filter((key) => key.slice(0, 4) === \"card\")\n            .filter((key) => this.state[key])\n            .map((key) => this.state[key]);\n\n        // I create an array of all possible three-card combinations to check\n\n        let threesToCheck = [];\n\n        for (let i = 0; i < visibleCards.length; i++) {\n            for (let j = i + 1; j < visibleCards.length; j++) {\n                for (let k = j + 1; k < visibleCards.length; k++) {\n                    threesToCheck.push([visibleCards[i], visibleCards[j], visibleCards[k]])\n                }\n            }\n        }\n\n        // I check every combination with checkForSet\n\n        for (const el of threesToCheck) {\n            if (this.checkIfSet(el)) {\n                set = el;\n                test = true;\n                break;\n            }\n        }\n\n        return [test, set];\n    };\n\n    generateNewCards = () => {\n\n        const newState = {};\n        let deck = this.state.deck;\n        let newCardId = \"\";\n\n        // I identify the positions of active cards (to be replaced) by iterating through state:\n\n        const activeCardLocs = [];\n\n        for (let i = 0; i < 3; i++) {\n            activeCardLocs.push(this.getKeyByValue(this.state, this.state.active[i]));\n        }\n\n        // I replace the cards.\n        // If all locations are > 12 &, they all get replaced; else, only those <=12 get replaced.\n\n        if (activeCardLocs.every(el => parseInt(el.substring(4)) > 12)) {\n            for (let i = 0; i < 3; i++) {\n                if (!deck.length) {\n                    newCardId = undefined;\n                    newState[activeCardLocs[i]] = newCardId;\n                } else {\n                    newCardId = deck[this.randomNum(deck)];\n                    deck = deck.filter((el) => (el !== newCardId));\n                    newState[activeCardLocs[i]] = newCardId;\n                }\n            }\n        } else {\n            for (let i = 0; i < 3; i++) {\n                if (parseInt(activeCardLocs[i].substring(4)) <= 12) {\n                    newCardId = deck[this.randomNum(deck)];\n                    newState[activeCardLocs[i]] = newCardId;\n                    deck = deck.filter(el => el !== newCardId);\n                } else {\n                    newCardId = undefined;\n                    newState[activeCardLocs[i]] = newCardId;\n                }\n            }\n        }\n\n        newState.deck = deck;\n        newState.active = [];\n\n        // I update the state to include the new cards & update deck\n\n        setTimeout(() => this.setState(newState, () => {\n            if (!deck.length) {\n                this.deckEmpty()\n            }\n        }), 500);\n    };\n\n    generateExtraCards = () => {\n\n        const newState = {};\n        let deck = this.state.deck;\n        let extraCardLocations = [];\n\n        if (Object.keys(this.state).some(key => parseInt(key.slice(4,6)) >= 13)) {\n            extraCardLocations = [\"card16\", \"card17\", \"card18\"];\n        } else {\n            extraCardLocations = [\"card13\", \"card14\", \"card15\"];\n        }\n\n        // I generate three new ids\n\n        for (let i = 0; i < 3; i++) {\n\n            let newCardId;\n            if (!deck.length) {\n                newCardId = undefined;\n                newState[extraCardLocations[i]] = newCardId;\n            } else {\n                newCardId = deck[this.randomNum(deck)];\n                newState[extraCardLocations[i]] = newCardId;\n                deck = deck.filter((el) => (el !== newCardId))\n            }\n        }\n\n        newState.deck = deck;\n        newState.active = [];\n\n        // I update the state to include the new cards & update deck\n\n        setTimeout(() => this.setState(newState, () => {\n            if (!deck.length) {\n                this.deckEmpty()\n            }\n        }), 500);\n    };\n\n    deckEmpty = () => {\n\n        const results = this.checkAllCards();\n        if (!results[0]) {\n            this.setState({win: true});\n        }\n    };\n\n    // clickhandlers:\n\n    checkButton = () => {\n\n        const results = this.checkAllCards();\n        const test = results[0];\n        const set = results[1];\n\n        if (test) {\n\n            this.setState({\n                active: set,\n                extraSecs: this.state.extraSecs + 3\n            }, () => this.generateNewCards())\n\n        } else {\n            if (!this.state.deck.length) {\n                this.setState({win: true})\n            } else {\n                this.generateExtraCards();\n            }\n        }\n    };\n\n    cardClickHandler = (e) => {\n\n        if (!this.state.win) {\n\n            // I add the id to state.active or remove it\n\n            const {active} = this.state;\n            const cardIndex = active.findIndex(el => el === e.target.id);\n\n            if (cardIndex < 0)  {\n                active.push(e.target.id);\n            } else {\n                active.splice(cardIndex, 1);\n            }\n\n            // If the active array has three elements, I check if it's a set\n\n            if (active.length === 3) {\n                this.setState({active: active}, () => this.threeCardsHighlighted());\n            } else {\n                this.setState({active: active});\n            }\n        }\n    };\n\n    // helpers:\n\n    randomNum = (deck) => {\n        return Math.floor(Math.random() * deck.length);\n    };\n\n    getKeyByValue = (object, value) => {\n        return Object.keys(object).find(key => object[key] === value);\n    };\n\n    render() {\n\n        let cards = Array(18).fill(\"0\");\n\n        if (Object.keys(this.state).some(key => key.slice(0,4) === \"card\")) {\n\n            cards = cards.map((card, i) => <GameCard\n                    key={`key${i}`}\n                    id={this.state[`card${i + 1}`]}\n                    active={this.state.active}\n                    cardClickHandler={this.cardClickHandler}/>);\n        }\n\n        return (\n            <div className=\"NewGame fade-in\">\n                <SVG/>\n                {cards}\n                {this.state.win ? <Victory/> : <CheckButton checkButton={this.checkButton}/>}\n                <Timer win={this.state.win} extraSecs={this.state.extraSecs}/>\n            </div>\n        )\n    }\n}\n\nexport default NewGame;","import React from \"react\";\n\nimport \"./Results.scss\";\n\nfunction Results() {\n\n    return (\n        <div className=\"Results fade-in\">\n            to be updated\n        </div>\n    )\n}\n\nexport default Results;","import React from \"react\";\n\nimport \"./Rules.scss\";\n\nfunction Rules() {\n\n    return (\n        <div className=\"Rules fade-in\">\n            <ol className=\"Rules__list\">\n                <li className=\"Rules__list__item\">The deck includes 81 cards, each having 4 distinct parameters (color, shading, shape, and number of\n                    elements).</li>\n                <li className=\"Rules__list__item\">Each card appears on the board only once. At the beginning of the game, there are 12 cards on\n                    the board.</li>\n                <li className=\"Rules__list__item\">The goal is to find *sets* of three cards that simultaneously have:</li>\n                    <ul>\n                        <li className=\"Rules__list__item\">the same colour or all different colours</li>\n                        <li className=\"Rules__list__item\">the same shape or all different shapes</li>\n                        <li className=\"Rules__list__item\">the same shading or all different shadings</li>\n                        <li className=\"Rules__list__item\">the same number of elements or all different numbers of elements.</li>\n                    </ul>\n                <li className=\"Rules__list__item\">Be as fast as you can (in the original game, you need to find sets faster than your opponent).</li>\n                <li className=\"Rules__list__item\">If there are no sets on the board, you can click on the \"check for sets\" button to display three\n                    additional cards.</li>\n                <li className=\"Rules__list__item\">When you pair the extra cards to make a set, they will not be replaced with new cards - the goal is\n                    to always have a total of 12 cards on the board.</li>\n                <li className=\"Rules__list__item\">If you click on the button and it turns out that you missed a set that was already on the board, 3\n                    additional seconds will be added to your final score.</li>\n            </ol>\n        </div>\n    )\n};\n\nexport default Rules;","import React from \"react\";\n\nimport './App.scss';\nimport \"./styles/shared.scss\";\nimport {Main} from \"./Main\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Main/>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}